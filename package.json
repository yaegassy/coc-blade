{
  "name": "coc-blade",
  "version": "0.18.1",
  "description": "Laravel Blade Templates extension for coc.nvim",
  "author": "yaegassy <yosstools@gmail.com>",
  "license": "MIT",
  "main": "lib/index.js",
  "keywords": [
    "coc.nvim",
    "php",
    "laravel",
    "blade",
    "formatter",
    "linter",
    "vim",
    "neovim"
  ],
  "engines": {
    "coc": "^0.0.80"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/yaegassy/coc-blade"
  },
  "scripts": {
    "schema": "curl -o schemas/bladeformatterrc.schema.json https://raw.githubusercontent.com/shufo/vscode-blade-formatter/master/schemas/bladeformatterrc.schema.json",
    "snippets": "yarn snippets:blade && yarn snippets:helper && yarn snippets:livewire && yarn snippets:snippets && node scripts/fixSnippets.js && yarn data:format",
    "snippets:blade": "curl -o data/snippets/blade.json https://raw.githubusercontent.com/onecentlin/laravel-blade-snippets-vscode/master/snippets/blade.json",
    "snippets:helper": "curl -o data/snippets/helpers.json https://raw.githubusercontent.com/onecentlin/laravel-blade-snippets-vscode/master/snippets/helpers.json",
    "snippets:livewire": "curl -o data/snippets/livewire.json https://raw.githubusercontent.com/onecentlin/laravel-blade-snippets-vscode/master/snippets/livewire.json",
    "snippets:snippets": "curl -o data/snippets/snippets.json https://raw.githubusercontent.com/onecentlin/laravel-blade-snippets-vscode/master/snippets/snippets.json",
    "generate": "node scripts/snippetsToCompletionJson.js && yarn data:format",
    "data:format": "prettier --write data/snippets/*.json && prettier --write data/completion/*.json",
    "lint": "eslint src --ext ts",
    "typecheck": "tsc --noEmit",
    "clean": "rimraf lib",
    "watch": "node esbuild.js --watch",
    "build": "node esbuild.js",
    "prepare": "node esbuild.js",
    "test": "vitest run src/__tests__",
    "test:watch": "vitest src/__tests__"
  },
  "prettier": {
    "singleQuote": true,
    "printWidth": 120,
    "semi": true
  },
  "devDependencies": {
    "@types/node": "^18.17.5",
    "@typescript-eslint/eslint-plugin": "^6.3.0",
    "@typescript-eslint/parser": "^6.3.0",
    "coc.nvim": "^0.0.82",
    "esbuild": "^0.16.17",
    "eslint": "^8.47.0",
    "eslint-config-prettier": "^8.8.0",
    "eslint-plugin-prettier": "^4.2.1",
    "prettier": "^2.8.8",
    "rimraf": "^5.0.1",
    "typescript": "^5.1.6",
    "vitest": "^0.23.2"
  },
  "activationEvents": [
    "onLanguage:blade"
  ],
  "contributes": {
    "rootPatterns": [
      {
        "filetype": "blade",
        "patterns": [
          ".bladeformatterrc.json",
          ".bladeformatterrc",
          ".bladeignore",
          "composer.json"
        ]
      }
    ],
    "jsonValidation": [
      {
        "fileMatch": ".bladeformatterrc.json",
        "url": "./schemas/bladeformatterrc.schema.json"
      },
      {
        "fileMatch": ".bladeformatterrc",
        "url": "./schemas/bladeformatterrc.schema.json"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "coc-blade configuration",
      "properties": {
        "blade.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enable coc-blade extension"
        },
        "blade.completion.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enable completion feature"
        },
        "blade.completion.enableSnippets": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Enable snippets completion"
        },
        "blade.completion.excludeSnippets": {
          "type": "array",
          "default": [],
          "description": "Exclude specific prefix in snippet completion"
        },
        "blade.completion.enableDirective": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Enable directive completion"
        },
        "blade.bladeFormatter.enable": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Enable/Disable the formatting feature by blade-formatter"
        },
        "blade.bladeFormatter.optIndentSize": {
          "type": [
            null,
            "integer"
          ],
          "default": null,
          "markdownDescription": "Indent size"
        },
        "blade.bladeFormatter.optWrapLineLength": {
          "type": [
            null,
            "integer"
          ],
          "default": null,
          "markdownDescription": "The length of line wrap size"
        },
        "blade.bladeFormatter.optWrapAttributes": {
          "type": [
            null,
            "string"
          ],
          "default": null,
          "enum": [
            "auto",
            "force",
            "force-aligned",
            "force-expand-multiline",
            "aligned-multiple",
            "preserve",
            "preserve-aligned"
          ],
          "markdownDescription": "The way to wrap attributes"
        },
        "blade.bladeFormatter.optEndWithNewLine": {
          "type": [
            "boolean"
          ],
          "default": true,
          "markdownDescription": "End output with newline"
        },
        "blade.bladeFormatter.optEndOfLine": {
          "type": [
            null,
            "string"
          ],
          "default": null,
          "enum": [
            "LF",
            "CRLF"
          ],
          "markdownDescription": "End of line character(s)."
        },
        "blade.bladeFormatter.optUseTabs": {
          "type": [
            "boolean"
          ],
          "default": false,
          "markdownDescription": "Use tab as indentation character"
        },
        "blade.bladeFormatter.optSortTailwindcssClasses": {
          "type": [
            null,
            "boolean"
          ],
          "default": false,
          "markdownDescription": "Sort Tailwindcss classes automatically. This option respects `tailwind.config.js` and sort classes according to settings"
        },
        "blade.bladeFormatter.optSortHtmlAttributes": {
          "type": [
            "string"
          ],
          "default": "none",
          "enum": [
            "none",
            "alphabetical",
            "code-guide",
            "idiomatic",
            "vuejs",
            "custom"
          ],
          "markdownDescription": "Sort HTML Attributes in the specified order"
        },
        "blade.bladeFormatter.optCustomHtmlAttributesOrder": {
          "type": [
            null,
            "string",
            "array"
          ],
          "default": null,
          "description": "Comma separated custom HTML attributes order. To enable this you must specify sort html attributes option as `custom`. You can use regex for attribute names"
        },
        "blade.bladeFormatter.optNoMultipleEmptyLines": {
          "type": [
            "boolean"
          ],
          "default": false,
          "markdownDescription": "Collapses multiple blank lines into a single blank line"
        },
        "blade.bladeFormatter.optNoPhpSyntaxCheck": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Disable PHP syntax check. Enabling this will suppress PHP syntax error reporting"
        },
        "blade.bladeFormatter.optNoSingleQuote": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Use double quotes instead of single quotes for php expression"
        },
        "blade.bladeFormatter.optWrapAttributesMinAttrs": {
          "type": [
            null,
            "integer"
          ],
          "default": null,
          "markdownDescription": "Minimum number of html tag attributes for force wrap attribute options. Wrap the first attribute only if 'force-expand-multiline' is specified in wrap attributes"
        },
        "blade.bladeFormatter.optIndentInnerHtml": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Indent `<head>` and `<body>` sections in html"
        },
        "blade.bladeFormatter.optExtraLiners": {
          "type": "array",
          "default": [],
          "description": "Comma separated list of tags that should have an extra newline before them"
        },
        "blade.bladeParserLint.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enable/Disable the linting feature using stillat-blade-parser"
        },
        "blade.bladeParserLint.debug": {
          "type": "boolean",
          "default": false,
          "description": "Output the results of the parsing of stillat-blade-parser to the channel log"
        },
        "blade.bladeParserLint.optCustomIfs": {
          "type": "array",
          "default": [],
          "description": "A list of custom if directives"
        },
        "blade.bladeParserLint.optDirectives": {
          "type": "array",
          "default": [],
          "description": "A list of directives that can be parsed"
        },
        "blade.bladeParserLint.optIgnoreDirectives": {
          "type": "array",
          "default": [],
          "description": "A list of directive names that should be ignored"
        },
        "blade.bladeLinter.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enable/Disable the linting feature by laravel-blade-linter"
        }
      }
    },
    "commands": [
      {
        "command": "blade.showOutput",
        "title": "Show blade output channel"
      },
      {
        "command": "blade.bladeFormatter.run",
        "title": "Run bladeFormatter.run"
      },
      {
        "command": "blade.showReferences",
        "title": "Show BladeDirective (`@...`) or BladeEcho (`{{ ... }}`, `{!! ... !!}`) location information for the current file"
      }
    ]
  },
  "dependencies": {
    "blade-formatter": "^1.37.0",
    "ignore": "^5.2.0",
    "stillat-blade-parser": "^1.2.0",
    "synckit": "^0.6.0"
  }
}
